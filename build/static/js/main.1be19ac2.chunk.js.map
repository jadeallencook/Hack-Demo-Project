{"version":3,"sources":["components/Form.js","constants.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","years","className","value","year","onChange","event","setYear","target","map","key","REPORTS","ACTUAL","FORECAST","QUARTERS","JAN","APR","AUG","OCT","CATEGORIES","SERVICES","TRAVEL","CASPEX","OTHER","Table","entries","Object","keys","reportKey","quarterKey","index","quarter","categoryKey","yIndex","zIndex","xIndex","id","data-ref","selected","onClick","setSelected","toLocaleString","App","useState","data","setEntries","updates","setUpdates","updated","setUpdated","document","onkeydown","keyCode","split","y","x","Number","getElementById","getAttribute","toString","object","assign","disabled","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1be19ac2.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.css';\n\nconst Form = props => {\n  const years = props.years;\n  return (\n    <form className=\"Form\">\n      <select\n        value={props.year}\n        onChange={event => props.setYear(event.target.value)}\n      >\n        {years.map(year => (\n          <option value={year} key={year}>\n            {year}\n          </option>\n        ))}\n      </select>\n    </form>\n  );\n};\n\nexport default Form;\n","export const REPORTS = {\n  ACTUAL: 'Actual',\n  FORECAST: 'Forecast'\n};\n\nexport const QUARTERS = {\n  JAN: 'Q1',\n  APR: 'Q2',\n  AUG: 'Q3',\n  OCT: 'Q4'\n};\n\nexport const CATEGORIES = {\n  SERVICES: 'Personal Services',\n  TRAVEL: 'Travel Entertainments',\n  CASPEX: 'Caspex',\n  OTHER: 'Other Expenses'\n};\n","import React from 'react';\nimport './Table.css';\nimport { QUARTERS, CATEGORIES, REPORTS } from '../constants';\n\nconst Table = props => {\n  const { entries } = props;\n  return (\n    <div className=\"Table\">\n      <ul className=\"headers\">\n        {Object.keys(REPORTS).map(reportKey =>\n          Object.keys(QUARTERS).map((quarterKey, index) => {\n            let quarter = QUARTERS[quarterKey];\n            return (\n              <li\n                key={`header-${index}`}\n              >{`${quarter} ${REPORTS[reportKey]}`}</li>\n            );\n          })\n        )}\n        <li>Category</li>\n      </ul>\n      {Object.keys(CATEGORIES).map((categoryKey, yIndex) => (\n        <ul className=\"rows\" key={categoryKey}>\n          {Object.keys(REPORTS).map((reportKey, zIndex) =>\n            Object.keys(QUARTERS).map((quarterKey, xIndex) => {\n              const key = `${quarterKey}-${categoryKey}-${reportKey}`;\n              const id = `${yIndex}-${zIndex > 0 ? 4 + xIndex : xIndex}-cell`;\n              return (\n                <li\n                  key={key}\n                  data-ref={key}\n                  id={id}\n                  className={props.selected === id ? 'selected' : null}\n                  onClick={event => props.setSelected(event.target.id)}\n                >\n                  ${entries[key] ? entries[key].toLocaleString() : 0}\n                </li>\n              );\n            })\n          )}\n          <li className=\"category\">{CATEGORIES[categoryKey]}</li>\n        </ul>\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { useState } from 'react';\nimport './App.css';\nimport * as data from './temp-data.json';\n\nimport Form from './components/Form';\nimport Table from './components/Table';\n\nfunction App() {\n  const [selected, setSelected] = useState('0-0-cell');\n  const [entries, setEntries] = useState(data.default);\n  const [updates, setUpdates] = useState(entries);\n  const [updated, setUpdated] = useState(false);\n  const years = Object.keys(entries);\n  const [year, setYear] = useState(years[0]);\n\n  document.onkeydown = event => {\n    const { keyCode } = event;\n    if (keyCode >= 37 && keyCode <= 40) {\n      let [y, x] = selected.split('-');\n      x = Number(x);\n      y = Number(y);\n      if (keyCode === 37 || keyCode === 39) {\n        x = keyCode === 39 ? (x < 7 ? x + 1 : x) : x > 0 ? x - 1 : 0;\n      } else if (keyCode === 38 || keyCode === 40) {\n        y = keyCode === 40 ? (y < 3 ? y + 1 : y) : y > 0 ? y - 1 : 0;\n      }\n      setSelected(`${y}-${x}-cell`);\n    } else if ((keyCode >= 48 && keyCode <= 57) || keyCode === 8) {\n      const elem = document.getElementById(selected);\n      const key = elem.getAttribute('data-ref');\n      let value = updates[year][key];\n      value = value\n        ? keyCode === 8\n          ? null\n          : value.toString() + event.key\n        : event.key;\n      let object = updates;\n      object[year][key] = Number(value);\n      setUpdates(Object.assign({}, object));\n      setUpdated(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Quarterly Finance Editor</h1>\n      <Form years={years} year={year} setYear={setYear} />\n      <Table\n        selected={selected}\n        setSelected={setSelected}\n        entries={updates[year]}\n      />\n      <button disabled={!updated} onClick={() => {\n        setEntries(Object.assign({}, updates));\n        setUpdated(false);\n      }}>Save Changes</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}